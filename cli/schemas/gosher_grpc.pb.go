// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/gosher.proto

package schemas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GosherClient is the client API for Gosher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GosherClient interface {
	SayHi(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ReceiveHi(ctx context.Context, in *Identity, opts ...grpc.CallOption) (Gosher_ReceiveHiClient, error)
	PingForFile(ctx context.Context, in *PingForFileRequest, opts ...grpc.CallOption) (Gosher_PingForFileClient, error)
	ListenForFilePings(ctx context.Context, opts ...grpc.CallOption) (Gosher_ListenForFilePingsClient, error)
}

type gosherClient struct {
	cc grpc.ClientConnInterface
}

func NewGosherClient(cc grpc.ClientConnInterface) GosherClient {
	return &gosherClient{cc}
}

func (c *gosherClient) SayHi(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/schemas.Gosher/SayHi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosherClient) ReceiveHi(ctx context.Context, in *Identity, opts ...grpc.CallOption) (Gosher_ReceiveHiClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gosher_ServiceDesc.Streams[0], "/schemas.Gosher/ReceiveHi", opts...)
	if err != nil {
		return nil, err
	}
	x := &gosherReceiveHiClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gosher_ReceiveHiClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type gosherReceiveHiClient struct {
	grpc.ClientStream
}

func (x *gosherReceiveHiClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gosherClient) PingForFile(ctx context.Context, in *PingForFileRequest, opts ...grpc.CallOption) (Gosher_PingForFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gosher_ServiceDesc.Streams[1], "/schemas.Gosher/PingForFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &gosherPingForFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gosher_PingForFileClient interface {
	Recv() (*PingForFileResponse, error)
	grpc.ClientStream
}

type gosherPingForFileClient struct {
	grpc.ClientStream
}

func (x *gosherPingForFileClient) Recv() (*PingForFileResponse, error) {
	m := new(PingForFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gosherClient) ListenForFilePings(ctx context.Context, opts ...grpc.CallOption) (Gosher_ListenForFilePingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gosher_ServiceDesc.Streams[2], "/schemas.Gosher/ListenForFilePings", opts...)
	if err != nil {
		return nil, err
	}
	x := &gosherListenForFilePingsClient{stream}
	return x, nil
}

type Gosher_ListenForFilePingsClient interface {
	Send(*ListenForFilePingsRequest) error
	Recv() (*ListenForFilePingsResponse, error)
	grpc.ClientStream
}

type gosherListenForFilePingsClient struct {
	grpc.ClientStream
}

func (x *gosherListenForFilePingsClient) Send(m *ListenForFilePingsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gosherListenForFilePingsClient) Recv() (*ListenForFilePingsResponse, error) {
	m := new(ListenForFilePingsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GosherServer is the server API for Gosher service.
// All implementations must embed UnimplementedGosherServer
// for forward compatibility
type GosherServer interface {
	SayHi(context.Context, *Request) (*Response, error)
	ReceiveHi(*Identity, Gosher_ReceiveHiServer) error
	PingForFile(*PingForFileRequest, Gosher_PingForFileServer) error
	ListenForFilePings(Gosher_ListenForFilePingsServer) error
	mustEmbedUnimplementedGosherServer()
}

// UnimplementedGosherServer must be embedded to have forward compatible implementations.
type UnimplementedGosherServer struct {
}

func (UnimplementedGosherServer) SayHi(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedGosherServer) ReceiveHi(*Identity, Gosher_ReceiveHiServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveHi not implemented")
}
func (UnimplementedGosherServer) PingForFile(*PingForFileRequest, Gosher_PingForFileServer) error {
	return status.Errorf(codes.Unimplemented, "method PingForFile not implemented")
}
func (UnimplementedGosherServer) ListenForFilePings(Gosher_ListenForFilePingsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenForFilePings not implemented")
}
func (UnimplementedGosherServer) mustEmbedUnimplementedGosherServer() {}

// UnsafeGosherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GosherServer will
// result in compilation errors.
type UnsafeGosherServer interface {
	mustEmbedUnimplementedGosherServer()
}

func RegisterGosherServer(s grpc.ServiceRegistrar, srv GosherServer) {
	s.RegisterService(&Gosher_ServiceDesc, srv)
}

func _Gosher_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosherServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schemas.Gosher/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosherServer).SayHi(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gosher_ReceiveHi_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Identity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GosherServer).ReceiveHi(m, &gosherReceiveHiServer{stream})
}

type Gosher_ReceiveHiServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type gosherReceiveHiServer struct {
	grpc.ServerStream
}

func (x *gosherReceiveHiServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Gosher_PingForFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingForFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GosherServer).PingForFile(m, &gosherPingForFileServer{stream})
}

type Gosher_PingForFileServer interface {
	Send(*PingForFileResponse) error
	grpc.ServerStream
}

type gosherPingForFileServer struct {
	grpc.ServerStream
}

func (x *gosherPingForFileServer) Send(m *PingForFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gosher_ListenForFilePings_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GosherServer).ListenForFilePings(&gosherListenForFilePingsServer{stream})
}

type Gosher_ListenForFilePingsServer interface {
	Send(*ListenForFilePingsResponse) error
	Recv() (*ListenForFilePingsRequest, error)
	grpc.ServerStream
}

type gosherListenForFilePingsServer struct {
	grpc.ServerStream
}

func (x *gosherListenForFilePingsServer) Send(m *ListenForFilePingsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gosherListenForFilePingsServer) Recv() (*ListenForFilePingsRequest, error) {
	m := new(ListenForFilePingsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gosher_ServiceDesc is the grpc.ServiceDesc for Gosher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gosher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schemas.Gosher",
	HandlerType: (*GosherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _Gosher_SayHi_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveHi",
			Handler:       _Gosher_ReceiveHi_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingForFile",
			Handler:       _Gosher_PingForFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListenForFilePings",
			Handler:       _Gosher_ListenForFilePings_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/gosher.proto",
}
