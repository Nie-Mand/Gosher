// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/gosher.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schemas.Custom)
pub struct Custom {
    // message fields
    // @@protoc_insertion_point(field:schemas.Custom.msg)
    pub msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:schemas.Custom.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Custom {
    fn default() -> &'a Custom {
        <Custom as ::protobuf::Message>::default_instance()
    }
}

impl Custom {
    pub fn new() -> Custom {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &Custom| { &m.msg },
            |m: &mut Custom| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Custom>(
            "Custom",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Custom {
    const NAME: &'static str = "Custom";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Custom {
        Custom::new()
    }

    fn clear(&mut self) {
        self.msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Custom {
        static instance: Custom = Custom {
            msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Custom {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Custom").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Custom {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Custom {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schemas.CustomResponse)
pub struct CustomResponse {
    // message fields
    // @@protoc_insertion_point(field:schemas.CustomResponse.msg)
    pub msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:schemas.CustomResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CustomResponse {
    fn default() -> &'a CustomResponse {
        <CustomResponse as ::protobuf::Message>::default_instance()
    }
}

impl CustomResponse {
    pub fn new() -> CustomResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &CustomResponse| { &m.msg },
            |m: &mut CustomResponse| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CustomResponse>(
            "CustomResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CustomResponse {
    const NAME: &'static str = "CustomResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CustomResponse {
        CustomResponse::new()
    }

    fn clear(&mut self) {
        self.msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CustomResponse {
        static instance: CustomResponse = CustomResponse {
            msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CustomResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CustomResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CustomResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schemas.UploadRequest)
pub struct UploadRequest {
    // message fields
    // @@protoc_insertion_point(field:schemas.UploadRequest.mime)
    pub mime: ::std::string::String,
    // @@protoc_insertion_point(field:schemas.UploadRequest.chunk)
    pub chunk: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:schemas.UploadRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UploadRequest {
    fn default() -> &'a UploadRequest {
        <UploadRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadRequest {
    pub fn new() -> UploadRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "mime",
            |m: &UploadRequest| { &m.mime },
            |m: &mut UploadRequest| { &mut m.mime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chunk",
            |m: &UploadRequest| { &m.chunk },
            |m: &mut UploadRequest| { &mut m.chunk },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UploadRequest>(
            "UploadRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UploadRequest {
    const NAME: &'static str = "UploadRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.mime = is.read_string()?;
                },
                18 => {
                    self.chunk = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.mime.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.mime);
        }
        if !self.chunk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.chunk);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.mime.is_empty() {
            os.write_string(1, &self.mime)?;
        }
        if !self.chunk.is_empty() {
            os.write_bytes(2, &self.chunk)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UploadRequest {
        UploadRequest::new()
    }

    fn clear(&mut self) {
        self.mime.clear();
        self.chunk.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UploadRequest {
        static instance: UploadRequest = UploadRequest {
            mime: ::std::string::String::new(),
            chunk: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UploadRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UploadRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UploadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:schemas.FileTransfer)
pub struct FileTransfer {
    // message fields
    // @@protoc_insertion_point(field:schemas.FileTransfer.msg)
    pub msg: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:schemas.FileTransfer.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FileTransfer {
    fn default() -> &'a FileTransfer {
        <FileTransfer as ::protobuf::Message>::default_instance()
    }
}

impl FileTransfer {
    pub fn new() -> FileTransfer {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "msg",
            |m: &FileTransfer| { &m.msg },
            |m: &mut FileTransfer| { &mut m.msg },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FileTransfer>(
            "FileTransfer",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FileTransfer {
    const NAME: &'static str = "FileTransfer";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.msg = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.msg.is_empty() {
            os.write_string(1, &self.msg)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FileTransfer {
        FileTransfer::new()
    }

    fn clear(&mut self) {
        self.msg.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FileTransfer {
        static instance: FileTransfer = FileTransfer {
            msg: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FileTransfer {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FileTransfer").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FileTransfer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileTransfer {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12proto/gosher.proto\x12\x07schemas\"\x1a\n\x06Custom\x12\x10\n\x03m\
    sg\x18\x01\x20\x01(\tR\x03msg\"\"\n\x0eCustomResponse\x12\x10\n\x03msg\
    \x18\x01\x20\x01(\tR\x03msg\"9\n\rUploadRequest\x12\x12\n\x04mime\x18\
    \x01\x20\x01(\tR\x04mime\x12\x14\n\x05chunk\x18\x02\x20\x01(\x0cR\x05chu\
    nk\"\x20\n\x0cFileTransfer\x12\x10\n\x03msg\x18\x01\x20\x01(\tR\x03msg2\
    \xb2\x01\n\nHelloWorld\x121\n\x05SayHi\x12\x0f.schemas.Custom\x1a\x17.sc\
    hemas.CustomResponse\x12;\n\x06Upload\x12\x16.schemas.UploadRequest\x1a\
    \x17.schemas.CustomResponse(\x01\x124\n\x08Download\x12\x0f.schemas.Cust\
    om\x1a\x15.schemas.FileTransfer0\x01B\x0bZ\t./schemasJ\xfd\x04\n\x06\x12\
    \x04\0\0\x1b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\
    \x02\0\x20\n\t\n\x02\x08\x0b\x12\x03\x02\0\x20\n\x08\n\x01\x02\x12\x03\
    \x04\0\x10\n\n\n\x02\x04\0\x12\x04\x06\0\x08\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x06\x08\x0e\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x04\x13\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x07\x0b\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x07\x11\x12\n\n\n\x02\
    \x04\x01\x12\x04\n\0\x0c\x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\x16\n\
    \x0b\n\x04\x04\x01\x02\0\x12\x03\x0b\x04\x13\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0b\x0b\x0e\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0b\x11\x12\n\n\n\x02\x04\x02\x12\
    \x04\x0e\0\x11\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0e\x08\x15\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x0f\x04\x14\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    \x0f\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0f\x0b\x0f\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x0f\x12\x13\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x10\x04\x14\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x10\x04\t\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03\x10\n\x0f\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x10\x12\x13\n\n\n\x02\x04\x03\x12\x04\x13\0\x15\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03\x13\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03\
    \x14\x04\x13\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x14\x04\n\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03\x14\x0b\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03\x14\x11\x12\n\n\n\x02\x06\0\x12\x04\x17\0\x1b\x01\n\n\n\x03\x06\0\
    \x01\x12\x03\x17\x08\x12\n\x0b\n\x04\x06\0\x02\0\x12\x03\x18\x040\n\x0c\
    \n\x05\x06\0\x02\0\x01\x12\x03\x18\x08\r\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x18\x0f\x15\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x18\x20.\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\x19\x04?\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x19\x08\x0e\n\x0c\n\x05\x06\0\x02\x01\x05\x12\x03\x19\x10\x16\n\x0c\
    \n\x05\x06\0\x02\x01\x02\x12\x03\x19\x17$\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03\x19/=\n\x0b\n\x04\x06\0\x02\x02\x12\x03\x1a\x048\n\x0c\n\x05\
    \x06\0\x02\x02\x01\x12\x03\x1a\x08\x10\n\x0c\n\x05\x06\0\x02\x02\x02\x12\
    \x03\x1a\x12\x18\n\x0c\n\x05\x06\0\x02\x02\x06\x12\x03\x1a#)\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03\x1a*6b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(Custom::generated_message_descriptor_data());
            messages.push(CustomResponse::generated_message_descriptor_data());
            messages.push(UploadRequest::generated_message_descriptor_data());
            messages.push(FileTransfer::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
